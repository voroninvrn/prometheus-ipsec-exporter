#!/usr/bin/python3

import subprocess
import glob
import re
import vici
import multiprocessing
import collections
import time
from sys import exit
from flask import Flask, Response
from prometheus_client import Gauge, generate_latest

class VState(object):
    """holds the VPN state"""
    def __init__(self):
        self.alive = True
        self.session = vici.Session()
        self.possible_connections = []
        self.active_connections = []


class IpsecExporter:
    def __init__(self,  queue = None):
        self.state = VState()
        self.connections = self.get_possible_connections()

        self.app = Flask(__name__)
        self.state = VState()

        self.gauge = Gauge("ipsec_tunnel_status", "Output from the vici", ["connection_name"])
      #  self.rtt = Gauge("ipsec_tunnel_rtt", "Output from the check_ipsec script", ["connection_name"])
        self.run_webserver()

    def get_possible_connections(self):
        ''' get all connections '''
        connections = []
        state = self.state
        state.possible_connections = []
        for conn in state.session.list_conns():
            for key in conn:
       #         state.possible_connections.append(key)
                connections.append(key)

        return connections



    def serve_metrics(self):
        "Main method to serve the metrics."
        connections = self.connections
        gauge = self.gauge
     #   rtt = self.rtt

        @self.app.route("/metrics")
        def metrics():
            """
            Flask endpoint to expose the prometheus metrics. With every request
            it gets, it executes the 'check_ipsec' command.
            """
            for conn in connections:
                ipsec_process = subprocess.run(["check_ipsec", conn], stdout=subprocess.PIPE)
                ipsec_process = float(ipsec_process.stdout)
                gauge.labels(conn).set(ipsec_process)

        #        ipsec_process_rtt = subprocess.run(["check_ipsec", "rtt", conn], stdout=subprocess.PIPE, encoding='utf-8')
        #        ipsec_process_rtt = float(ipsec_process_rtt.stdout)
         #       rtt.labels(conn).set(ipsec_process_rtt)

            metrics = generate_latest()

            return Response(metrics, mimetype='text/plain', content_type='text/plain; charset=utf-8')

    def run_webserver(self):
        "Start the web application."
        self.serve_metrics()
        self.app.run(
            port="9000",
            host="0.0.0.0",
            use_reloader=False,
            debug=True
        )


if __name__ == "__main__":
    IpsecExporter()
