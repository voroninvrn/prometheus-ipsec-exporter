#!/bin/bash
#set -x
# Written By Nicole, transformed to Zabbix by Andre Schild
# Any Comments or Questions please e-mail to andre@schild.ws
#
# Plugin Name: check_ipsec
# Version: 2.2
# Date: 2017/11/27 2.2 Removed test for gateway.txt file
# Date: 2016/11/01 2.1 Added support for ikev1 tunnels with strongswan
# Date: 2015/02/06 2.0 Added support for strongswan
# Date: 2021/05/12 2.1 Added support for strongswan 5.9.2
#
#
# ------------Defining Variables------------
PROGNAME="$(basename $0)"
# ---------- Change to your needs ----------
IPSECBIN="$(which ipsec)"
FPINGBIN="$(which fping)"
# ping server in network on the other side of the tunnel
PINGIP=1		# ping yes or no (1/0)
USE_SUDO=0		# Run the ipsec command via sudo
SUDOBIN="$(which sudo)"
# ------------------------------------------
function print_help {
echo "You have to declare at least one action"
echo "Help :"
echo ""
echo "check_ipsec packetloss [tunnel_name]"
echo "    -> Check packetloss to endpoint (other side of tunnel) then show the avg."
echo ""
echo "check_ipsec rtt [tunnel_name]"
echo "    -> Determine RTT to endpoint (other side of tunnel) then show the avg."
echo ""
echo "check_ipsec systemd"
echo "    -> Check systemd service of strongswan"
}


if [ $USE_SUDO -eq 1 ];
then
    IPSECCMD="$SUDOBIN -- $IPSECBIN"
else
    IPSECCMD=$IPSECBIN
fi

# Testing availability of $IPSECBIN, $FPINGBIN
if [ $# -eq 0 ];
then
   echo UNKNOWN - missing Arguments. Run check_ipsec --help
   exit $STATE_UNKNOWN
fi

test -e $IPSECBIN
if [ $? -ne 0 ];
then
	echo CRITICAL - $IPSECBIN not exist
	exit $STATE_CRITICAL
else
	STRONG="$($IPSECBIN --version |grep strongSwan | wc -l)"
fi

if [ $PINGIP -eq 1 ]
then
	test -e $FPINGBIN
	if [ $? -ne 0 ];
	then
		echo CRITICAL - $FPINGBIN not exist
		exit $STATE_CRITICAL
	fi
fi

test_tunnel() {

	CONN="$1"
	if [[ "$STRONG" -eq "1" ]]
	then
	    tunneltest=$($IPSECCMD status $CONN | grep -e "ESTABLISHED" | wc -l)
	    if [[ "$tunneltest" -eq "0" ]]
    	then
	    tunneltest=$($IPSECCMD status | grep -e "IPsec SA established" | grep -e "newest IPSEC" |grep -e "$CONN" | wc -l)
	    fi
	else
	    tunneltest=$($IPSECCMD status | grep -e "IPsec SA established" | grep -e "newest IPSEC" |grep -e "$CONN" | wc -l)
	fi

	if [[ "$tunneltest" -eq "0" ]]
    then
        # Return bad
	    echo 0
    else
        # Return good
	    echo 1
    fi
}

ping_tunnel() {

ACTION="$1"
CONN="$2"

if [[ "$1" == "packetloss" ]];
then
# tunnels_name=`sudo ipsec status | awk {'print $1'}  | cut -d"[" -f1 | cut -d"{" -f1  | sort | uniq | grep -v "Security"`
        if [[ "$2" == "" ]]
        then
        echo "Tunnel name is empty."
        echo "Available tunnel names: "
        tunnels_name=`sudo ipsec status | awk {'print $1'}  | cut -d"[" -f1 | cut -d"{" -f1  | sort | uniq | grep -v "Security"`
        echo $tunnels_name
        exit 1
        fi
        export tunnel_name="$2"
        tunnel_endpoint_ip=`sudo ipsec status | grep -i $tunnel_name | grep -o "===.*" | awk {'print $2'}`
function get_gateway () {
python3 - <<END
import ipaddress 
n = ipaddress.IPv4Network('$tunnel_endpoint_ip')
first, last = n[1], n[-2]
print (first)
END
}
        tunnel_endpoint_ip=$(get_gateway)
        if [ "$tunnel_endpoint_ip" = "" ]
        then
        echo "Tunnel does not exists"
        exit 1
        fi
        ping $tunnel_endpoint_ip -c 20 -i 0.2 -W1 > /tmp/ping_status
        packet_loss_percentage=`cat /tmp/ping_status | grep loss | awk {'print $6'} | sed 's/%//g'`
        echo "$packet_loss_percentage"

exit 0
fi

if [ "$1" == "rtt" ];
then
# tunnels_name=`sudo ipsec status | awk {'print $1'}  | cut -d"[" -f1 | cut -d"{" -f1  | sort | uniq | grep -v "Security"`
        if [[ "$2" == "" ]]
        then
        echo "Tunnel name is empty."
        echo "Available tunnel names: "
        tunnels_name=`sudo ipsec status | awk {'print $1'}  | cut -d"[" -f1 | cut -d"{" -f1  | sort | uniq | grep -v "Security"`
        echo $tunnels_name
        exit 1
        fi
        export tunnel_name="$2"
        tunnel_endpoint_ip=`sudo ipsec status | grep -i $tunnel_name | grep -o "===.*" | awk {'print $2'}`

function get_gateway () {
python3 - <<END
import ipaddress 
n = ipaddress.IPv4Network('$tunnel_endpoint_ip')
first, last = n[1], n[-2]
print (first)
END
}
        tunnel_endpoint_ip=$(get_gateway)
        if [ "$tunnel_endpoint_ip" = "" ]
        then
        echo "Tunnel does not exists"
        exit 1
        fi
        rtt_average=`ping $tunnel_endpoint_ip -c 10 -i 0.2 -W1 | grep rtt | cut -d= -f2 | cut -d"/" -f2`
        echo "$rtt_average"
exit 0
fi
}
check_service() {
running_status=`sudo systemctl status strongswan.service | grep Active | cut -d":" -f2 | awk {'print $2'} | cut -d"(" -f2 | sed 's/)//g'`
        if [[ "$running_status" != "running" ]];
        then
        echo "0"
        else
        echo "1"
        fi
exit 0
}

case "$1" in
--help)
        print_help
        exit $STATE_OK
        ;;
-h)
        print_help
        exit $STATE_OK
        ;;
--h)
        print_help
        exit $STATE_OK
        ;;
systemd)
        check_service
        exit $STATE_OK
        ;;
*)

	if [ $# -eq 1 ]
	then
    	test_tunnel $1
    	else
	        if [ $# -eq 2 ]
	        then
    		    ping_tunnel $1 $2
    	         else
    		        print_help
    		    fi
    	    fi
    ;;
esac
